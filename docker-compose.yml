version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:29092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-setup
    depends_on:
      - kafka
    volumes:
      - ./kafka/create-topics.sh:/scripts/create-topics.sh
    entrypoint: ["/bin/bash", "/scripts/create-topics.sh"]

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: ai-service
    ports:
      - "5000:5000"
    depends_on:
      - redis
    environment:
      - PYTHONUNBUFFERED=1

  log-producer:
    build:
      context: ./log-producer
      dockerfile: Dockerfile
    container_name: log-producer
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  log-consumer:
    build:
      context: ./log-consumer
      dockerfile: Dockerfile
    container_name: log-consumer
    ports:
      - "8082:8082"
    depends_on:
      - kafka
      - redis
      - ai-service
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - AI_SERVICE_URL=http://ai-service:5000

  anomaly-api:
    build:
      context: ./anomaly-api
      dockerfile: Dockerfile
    container_name: anomaly-api
    ports:
      - "8081:8081"
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis

volumes:
  redis_data:

networks:
  default:
    name: watchtower-network
